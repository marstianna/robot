basic_knowledge_name = "multi_tenant_basic_knowledge"

basic_knowledge = [
    "LAZADA主要运营的国家为东南亚6个国家，分别为：新加坡,马来西亚,越南,菲律宾,泰国,印度尼西亚",
    "新加坡的国家代号为SG",
    "LAZADA新加坡线上环境部署在新加坡云上机房和新加坡云下机房",
    "LAZADA新加坡预发环境部署在新加坡云上预发机房和新加坡云下预发机房",
    "马来西亚的国家代号为MY，简称为马来",
    # "LAZADA马来西亚线上环境部署在新加坡云上机房和新加坡云下机房",
    "LAZADA马来线上环境部署在新加坡云上机房和新加坡云下机房",
    # "LAZADA马来西亚预发环境部署在新加坡云上预发机房和新加坡云下预发机房",
    "LAZADA马来预发环境部署在新加坡云上预发机房和新加坡云下预发机房",
    "越南的国家代号为VN",
    "LAZADA越南线上环境部署在新加坡云上机房和新加坡云下机房",
    "LAZADA越南预发环境部署在新加坡云上预发机房和新加坡云下预发机房",
    "菲律宾的国家代号为PH",
    "LAZADA菲律宾线上环境部署在新加坡云上机房和新加坡云下机房",
    "LAZADA菲律宾预发环境部署在新加坡云上预发机房和新加坡云下预发机房",
    "泰国的国家代号为TH",
    "LAZADA泰国线上环境部署在新加坡云上机房和新加坡云下机房",
    "LAZADA泰国预发环境部署在新加坡云上预发机房和新加坡云下预发机房",
    "印度尼西亚的国家代号为ID",
    # "LAZADA印度尼西亚线上环境部署在印尼云上机房和印尼云下机房",
    "LAZADA印尼线上环境部署在印尼云上机房和印尼云下机房",
    # "LAZADA印度尼西亚预发环境部署在印尼云上预发机房和印尼云下预发机房",
    "LAZADA印尼预发环境部署在印尼云上预发机房和印尼云下预发机房",
    "LAZADA新加坡的租户标为LAZADA_SG",
    "LAZADA马来的租户标为LAZADA_MY",
    "LAZADA越南的租户标为LAZADA_VN",
    "LAZADA菲律宾的租户标为LAZADA_PH",
    "LAZADA泰国的租户标为LAZADA_TH",
    "LAZADA印尼的租户标为LAZADA_ID",
    # 机房和单元
    # 线上
    "线上中心机房的代号为na610",
    "线上中心机房的单元标为center",
    "LAZADA新加坡云上机房的代号为os30",
    "LAZADA新加坡云上机房的单元标为rg-sg",
    "LAZADA新加坡云下机房的代号为sg52",
    "LAZADA新加坡云下机房的单元标为lazada-sg-2",
    "LAZADA印尼云上机房的代号为id137",
    "LAZADA印尼云上机房的单元标为rg-id",
    "LAZADA印尼云下机房的代号为id35",
    "LAZADA印尼云下机房的单元标为lazada-id",
    # 预发
    "中心预发机房的代号为na620",
    "中心预发机房的单元标为pre",
    "LAZADA新加坡云上预发机房的代号为os30",
    "LAZADA新加坡云上预发机房的单元标为rg-sg-pre",
    "LAZADA新加坡云下预发机房的代号为sg52",
    "LAZADA新加坡云下预发机房的单元标为lazada-sg-2-pre",
    "LAZADA印尼云上预发机房的代号为id137",
    "LAZADA印尼云上预发机房的单元标为rg-id-pre",
    "LAZADA印尼云下预发机房的代号为id35",
    "LAZADA印尼云下预发机房的单元标为lazada-id-pre",
    # 老单元
    "LAZADA新加坡老单元线上单元标为lazada-sg",
    "LAZADA新加坡老单元预发单元标为lazada-sg-pre",
    "LAZADA马来老单元线上单元标为lazada-my",
    "LAZADA马来老单元预发单元标为lazada-my-pre",
    "LAZADA越南老单元线上单元标为lazada-vn",
    "LAZADA越南老单元预发单元标为lazada-vn-pre",
    "LAZADA菲律宾老单元线上单元标为lazada-ph",
    "LAZADA菲律宾老单元预发单元标为lazada-ph-pre",
    "LAZADA泰国老单元线上单元标为lazada-th",
    "LAZADA泰国老单元预发单元标为lazada-th-pre",
    "LAZADA印尼老单元线上单元标为lazada-id",
    "LAZADA印尼老单元预发单元标为lazada-id-pre",
    # TDDL
    "多租户针对TDDL做了改造，如果您的应用使用了数据库datetime字段类型，那么在您的应用中请添加global.landlord.mybatis.type.enabled=false",
    # ScheduleX2
    # 线上
    "ScheduleX2的国际化新加坡机房的domainName为sg.schedule2.alibaba-inc.com",
    "ScheduleX2的印尼机房的domainName为id.schedule2.alibaba-inc.com",
    # 预发
    "ScheduleX2的国际化新加坡预发机房的domainName为pre-sg-schedulerx2.alibaba-inc.com",
    "ScheduleX2的印尼预发机房的domainName为pre-id-schedulerx2.alibaba-inc.com",
    # 日常
    "ScheduleX2的日常机房的domainName为schedulerx2.taobao.net",
    # Sentinel 3.x
    # 线上
    "Sentinel的线上控制台地址为https://sentinel2.alibaba-inc.com/#/dashboard/home ",
    # 预发
    "Sentinel的预发控制台地址为https://pre-sentinel2.alibaba-inc.com/#/dashboard/home",
    # 日常
    "Sentinel的日常控制台地址为http://sentinel2.alibaba.net/#/dashboard/home",
    # 配置源
    "多站点全局默认配置，包括g11n,日志，多租户等，对应的diamond配置为\ndataId:satellite.properties\ngroupId:DEFAULT",
    "单个应用的多站点全局配置对应的本地配置文件为satellite.properties",
    "单个应用单个单元维度的多站点全局配置，对应的diamond配置为\n\"dataId:{应用名}:satellite.properties\ngroupId:DEFAULT\"",
    "单个应用的多租户全局配置对应的本地配置文件为landlord.properties",
    "单个应用单个单元维度的多站点全局配置，对应的diamond配置为\n\"dataId:{appName}:landlord.properties\ngroupId:DEFAULT\"",
    "应用启动文件，用来指定当前环境支持哪些租户，以及该环境一些差异化的租户配置以及应用配置，对应的diamond配置为\n\"dataId:{appName}\ngroupId:env-deploy.properties\"。该配置只会在应用启动加载，不支持动态热替换",
    "单个应用的单个租户全局配置对应的本地配置文件为\"tenant/{tenantId}.properties\"",
    "从spring的配置中加载配置的多租户配置为\"load.spring.properties=on\"",
    "用户可以指定一个本地文件作为本地启动的多租户配置的配置，示例为\"local.landlord.file.name=landlord-2.properties\"。该配置需放在本地的env-config.properties中，如果指定了本地启动自定义多租户配置文件，则本地启动不会读取landlord.properties里面的内容，若本地无配置指定的描述文件，则还是按照本地的landlord.properties读取",
    "用户可以指定日常一个diamond作为本地启动的多租户配置，示例为\n\"import.diamond.dataId = global-voyager-provider-s:Landlord-Integration-Test-daily\nimport.diamond.groupId = LANDLORD\"。该配置需放在本地的env-config.properties中，如果指定了本地启动自定义多租户diamond配置文件，则本地启动不会读取landlord.properties里面的内容",
    # 工具类
    # 租户上下文工具类
    "程序运行期间，可以通过com.alibaba.global.landlord.LandlordContext获取到对应的租户上下文信息。",
    "LandlordContext.getCurrentTenantId()可以获取当前租户ID",
    "LandlordContext.getCurrentSiteId()可以获取当前站点ID",
    "LandlordContext.getCurrentOeId()可以获取当前运营实体ID",
    "LandlordContext.setTenantSpec(TenantId.LAZADA_SG, -1)可以设置上下文，入参为租户ID和过期时间，-1为不过期。传入不支持的租户会报类似[Landlord] TenantId[XXX] not exists!错误",
    "LandlordContext.clearTenantSpec()可以清理上下文。若应用仅支持一个租户，那么租户上下文默认即为该租户，无法清理",
    "LandlordContext.setTenantSpecForNextInvoke(TenantId.LAZADA_SG)可以设置下次调用，调用完会自动清理。传入不支持的租户会报类似[Landlord] TenantId[XXX] not exists!错误",
    # 租户处理工具类
    "程序运行期间，可以通过com.alibaba.global.landlord.Landlord#runAllTenant遍历支持的租户",
    "Landlord.runTenant(()-> {})可以遍历所有支持的租户，遍历完成后会自动清空租户上下文（支持多个租户时，支持单租户上下文无法清除）",
    "Landlord.runTenant(\"LAZADA_SG\", ()-> {})可以仅遍历设置的这一个租户，遍历完成后会自动清空租户上下文（支持多个租户时，支持单租户上下文无法清除）",
    "Landlord.getTenantIds()可以获取所有支持的租户id",
    # 国际化上下文工具类
    "程序运行期间，可以通过com.alibaba.global.g11n.G11nContext获取到对应的国际化相关信息。",
    "G11nContext.getCurrentRegion()可以获取到当前区域，例如当租户上下文设置为LAZADA_SG，结果为SG",
    "G11nContext.getCurrentRegion()可以获取到当前国家，例如当租户上下文设置为LAZADA_SG，结果为SG",
    "G11nContext.getCurrentLocale()可以获取到对应国家的Locale实例，例如当租户上下文设置为LAZADA_SG，结果为en_SG",
    "G11nContext.getCurrentCurrencyCode()可以获取到当前国家的货币类型，例如当租户上下文设置为LAZADA_SG，结果为SGD",
    "G11nContext.getCurrentCurrencyCode()可以获取到当前国家的币种，例如当租户上下文设置为LAZADA_SG，结果为SGD",
    "G11nContext.getCurrentLocaleSpec()可以获取到当前国家的时区、手机号码区号等所有LocaleSpec信息，例如当租户上下文设置为LAZADA_SG，LocaleSpec(key=SG|en-SG|SGD|702, zoneId=GMT+08:00, locale=en_SG, localeForText=en_SG, phoneCode=+65, style=LOCAL, direction=LeftToRight, currencySpec=CurrencySpec(code=SGD, symbol=$, format=com.alibaba.global.g11n.util.MoneyFormat@7cb22c87, localeFormatMap={}, unit=SGD, roundingMode=HALF_UP, roundingFractionDigits=2, minCent=1))",
    "LandlordContext.setLocaleSpec(region, language, currencyCode, zoneCode)可以修改当前国际化信息，不修改的，直接传null即可",
    # G11n
    # 文案工具类
    # 通用文案工具类
    "TextUtils.parseLocale()可以解析字符串得到locale信息，如TextUtils.parseLocale(\"en\")",
    "TextUtils.get()可以获取指定语种的文案，若该语种未配置文案，会返回英文文案，如TextUtils.get(\"hello-world\", Locale.CHINA)",
    # 上下文文案工具类
    "LocalizedTextUtils.getCurrentLocale()可以获取上下文中的locale信息，租户上下文为null时会返回null ",
    "LocalizedTextUtils.get()可以获取文案，如LocalizedTextUtils.get(\"hello-world\")",
    # 币种工具类
    # 通用币种工具类
    "MonetaryUtils.getCurrencyUnitByRegion()可以根据区域获取币种信息，如MonetaryUtils.getCurrencyUnitByRegion(\"SG\")",
    "MonetaryUtils.getCurrencyUnit()可以根据currencyCode获取currencyUnit信息，如MonetaryUtils.getCurrencyUnit(\"USD\")",
    "MonetaryUtils.getCurrencySpec()可以根据currencyCode获取currencySpec信息，如MonetaryUtils.getCurrencySpec(\"USD\")",
    "MonetaryUtils.getSymbol()可以根据currencyCode获取币种符号，如MonetaryUtils.getSymbol(\"USD\", DisplayStyle.GLOBAL)",
    "MonetaryUtils.zero()可以根据货币信息获取该货币数值为0的MonetaryAmount结果，如MonetaryUtils.zero(\"USD\")",
    "MonetaryUtils.minimum()可以根据货币信息获取该货币数值最小的MonetaryAmount结果，如MonetaryUtils.minimum(\"USD\")",
    "MonetaryUtils.of()可以创建一个具有指定金额和指定币种的货币对象，如MonetaryUtils.of(1688L, \"USD\")",
    "MonetaryUtils.getMoneyFormat()可以根据currencyCode、language和displayStyle获取MoneyFormat信息，如MonetaryUtils.getMoneyFormat(\"CNY\", \"cn\", DisplayStyle.GLOBAL)",
    "MonetaryUtils.format()可以格式化货币得到格式化后的文案，如MonetaryUtils.format(MonetaryUtils.of(\"1000000\", \"CNY\", \"en\", DisplayStyle.GLOBAL), \"en\",DisplayStyle.GLOBAL)",
    "MonetaryUtils.formatRange()可以格式化价格区间得到带币种符号的格式化文案，如MonetaryUtils.formatRange(fromAmount, toAmount, \"en\", \"->\", DisplayStyle.GLOBAL)",
    "MonetaryUtils.noSymbolFormat()可以格式化货币得到不带币种符号的格式化后的文案，如MonetaryUtils.noSymbolFormat(amount, \"en\", DisplayStyle.GLOBAL)",
    "MonetaryUtils.maskFormat()可以格式化货币，并使用掩码，如新币123.45元，掩码为'?'，位数为4，则结果为\"$???.?5\"。使用示例：MonetaryUtils.maskFormat(amount, \"en\", DisplayStyle.GLOBAL, \'?\', 5)",
    "MonetaryUtils.noSymbolMaskFormat()可以格式化货币，不包含币种符号，并使用掩码，如新币123.45元，掩码为'?'，位数为4，则结果为\"???.?5\"。使用示例：MonetaryUtils.noSymbolMaskFormat(amount, \"en\", DisplayStyle.GLOBAL, '?', 5)",
    # 上下文币种工具类
    "LocalizedMonetaryUtils.getCurrencySpec()可以根据上下文和currencyCode获取currencySpec信息，如LocalizedMonetaryUtils.getCurrencySpec(\"USD\")",
    "LocalizedMonetaryUtils.getCurrencyUnit()可以根据上下文的currencySpec获取currencyUnit",
    "LocalizedMonetaryUtils.getSymbol()可以根据上下文的currencySpec获取币种符号",
    "LocalizedMonetaryUtils.zero()可以根据上下文的货币信息获取该货币数值为0的MonetaryAmount结果",
    "LocalizedMonetaryUtils.minimum()可以根据上下文的货币信息获取该货币数值最小的MonetaryAmount结果",
    "LocalizedMonetaryUtils.of()可以根据上下文的货币信息创建一个具有指定金额的货币对象，如LocalizedMonetaryUtils.of(1234567890L)",
    # round、divide接口待补充
    "LocalizedMonetaryUtils.toLong()可以根据上下文的货币信息将MonetaryAmount对象转成分",
    "LocalizedMonetaryUtils.toDouble()可以根据上下文的货币信息将MonetaryAmount对象转成元，double类型",
    "LocalizedMonetaryUtils.toBigDecimal()可以根据上下文的货币信息将MonetaryAmount对象转成元，BigDecimal类型",
    "LocalizedMonetaryUtils.getCurrentMoneyFormat()可以根据上下文的货币信息和currencyCode获取MoneyFormat信息，如LocalizedMonetaryUtils.getCurrentMoneyFormat(\"CNY\")",
    "LocalizedMonetaryUtils.format()可以根据上下文的货币信息格式化货币得到格式化后的文案，如LocalizedMonetaryUtils.format(monetaryAmount)",
    "LocalizedMonetaryUtils.formatRange()可以根据上下文的货币信息格式化价格区间得到带币种符号的格式化文案，如LocalizedMonetaryUtils.formatRange(fromAmount, toAmount, \" -> \")",
    "LocalizedMonetaryUtils.noSymbolFormat()可以根据上下文的货币信息格式化货币得到不带币种符号的格式化后的文案，如LocalizedMonetaryUtils.noSymbolFormat(monetaryAmount)",
    "LocalizedMonetaryUtils.maskFormat()可以根据上下文的货币信息格式化货币，并使用掩码，如新币123.45元，掩码为'?'，位数为4，则结果为\"$???.?5\"。使用示例：LocalizedMonetaryUtils.maskFormat(amount, \'*\', 5)",
    "LocalizedMonetaryUtils.noSymbolMaskFormat()可以根据上下文的货币信息格式化货币，不包含币种符号，并使用掩码，如新币123.45元，掩码为'?'，位数为4，则结果为\"???.?5\"。使用示例：LocalizedMonetaryUtils.noSymbolMaskFormat(amount, \'*\', 5)",
    # 时间工具类
    # 通用时间工具类
    "TimeUtils.getRegionDefaultZoneId()可以根据区域编码获取对应的zoneId信息，如TimeUtils.getRegionDefaultZoneId(\"SG\")",
    "TimeUtils.currentEpochMills()可以获取当前的epochMills",
    "TimeUtils.currentInstant()可以获取当前所在地的instant",
    "TimeUtils.currentDateTime()可以根据区域编码获取对应的ZonedDateTime信息，如TimeUtils.currentDateTime(TimeUtils.getRegionDefaultZoneId(\"SG\"))",
    "TimeUtils.of()可以根据instant、epochMills获取ZonedDateTime，如TimeUtils.of(Instant.now(), TimeUtils.getRegionDefaultZoneId(\"US\"))",
    "TimeUtils.transfer()可以根据ZoneId将原始ZonedDateTime转为该ZoneId对应的ZonedDateTime，如TimeUtils.transfer(ZonedDateTime.now(), TimeUtils.getRegionDefaultZoneId(\"US\"))",
    "TimeUtils.toDate()可以将ZonedDateTime转为Date类型，如TimeUtils.toDate(ZonedDateTime.now())",
    "TimeUtils.getDateFormatter()可以根据locale和pattern获取DateTimeFormatter，如TimeUtils.getDateFormatter(Locale.CHINA, \"yyyy年MM月dd日\")",
    "TimeUtils.formatDayOfWeek()可以得到星期几，如TimeUtils.formatDayOfWeek(ZonedDateTime.now(), Locale.CHINA)",
    "TimeUtils.formatDayOfMonth()可以得到当月的几号，如TimeUtils.formatDayOfMonth(ZonedDateTime.now(), Locale.CHINA)",
    "TimeUtils.formatMonth()可以得到几月份，如TimeUtils.formatMonth(ZonedDateTime.now(), Locale.CHINA)",
    # 上下文时间工具类
    "LocalizedTimeUtils.currentEpochMills()可以获取当前的epochMills",
    "LocalizedTimeUtils.currentInstant()可以获取当前所在地的instant",
    "LocalizedTimeUtils.currentDateTime()可以获取当前所在地的ZonedDateTime信息",
    "LocalizedTimeUtils.of()可以根据当前所在地和instant、epochMills获取ZonedDateTime，如LocalizedTimeUtils.of(Instant.now())",
    "LocalizedTimeUtils.transfer()可以根据ZoneId将原始ZonedDateTime转为该ZoneId对应的ZonedDateTime，如LocalizedTimeUtils.transfer(ZonedDateTime.now(), TimeUtils.getRegionDefaultZoneId(\"US\"))",
    "LocalizedTimeUtils.toDate()可以将ZonedDateTime转为Date类型，如LocalizedTimeUtils.toDate(LocalizedTimeUtils.currentDateTime())",
    "LocalizedTimeUtils.getDateFormatter()可以根据当前所在地和pattern获取DateTimeFormatter，如LocalizedTimeUtils.getDateFormatter(\"yyyy年MM月dd日\")",
    "LocalizedTimeUtils.formatDayOfWeek()可以根据当前所在地得到星期几，如LocalizedTimeUtils.formatDayOfWeek(ZonedDateTime.now())",
    "LocalizedTimeUtils.formatDayOfMonth()可以根据当前所在地得到当月的几号，如LocalizedTimeUtils.formatDayOfMonth(ZonedDateTime.now())",
    "LocalizedTimeUtils.formatMonth()可以根据当前所在地得到几月份，如LocalizedTimeUtils.formatMonth(ZonedDateTime.now())",
    # 通信模式
    "可以通过枚举类com.alibaba.global.landlord.model.ProtocolMode指定对应的通信协议模式，实现通信协议的增强（不侵入业务代码），达到接口按租户裂变，hsf跨单元注册，hsf跨单元调用，metaq跨单元消费，metaq跨单元投递等能力。",
    "ProtocolMode.RAW表示原始模式，当模式设置没有配置时，自动生效的默认值",
    "ProtocolMode.MULTI表示当前HSF接口按照租户裂变版本号，例如应用支持LAZADA_SG租户，该模式会在版本号后加\"_LAZADA_SG\"",
    "ProtocolMode.MULTI表示当前METAQ按照租户裂变对应的topic和cid，例如应用支持LAZADA_SG租户，该模式会在topic前加\"GL_\"，在topic后加\"_LAZADA_SG\"，在cid前加\"CID_GL_\"，在cid后加\"_LAZADA_SG\"",
    "ProtocolMode.SOURCE_RAW表示跨单元调用老单元的HSF服务，或者跨单元消费老单元的METAQ消息，会根据支持的租户解析为相应的老单元",
    "ProtocolMode.TARGET_RAW表示从老单元调用目标单元的HSF接口，订阅目标单元的METAQ消息，或者将METAQ消息投递到目标单元",
    "ProtocolMode.WRAPPER_RAW表示在本单元注册一个版本号为1.0.0_GL的HSF服务",
    "ProtocolMode.WRAPPER_SOURCE_RAW表示将HSF服务注册到老单元，并在版本号后面追加_GL",
    "ProtocolMode.PEER_RAW为菜鸟和中台互调的时候使用的特殊场景，菜鸟不会在印尼单元部署，只会在新加坡机房部署，使用PEER_RAW的话，lazada-id单元对应的PEER单元是rg-sg",
    # 日志
    "多租户相关的日志一般在应用所部署机器的/home/admin/{应用名}/logs/middleware/satellite路径下",
    # 租户配置产品
    # 产品概览
    "voyager的租户配置产品可以帮助开发者统一管理应用的租户配置，包含对租户配置的新增、编辑、查看、克隆、删除和生效等功能",
    "在voyager的租户配置产品的配置编辑页面，可以使用表单模式对租户配置进行编辑，也可以切换为代码模式编辑，保存所编辑的配置组时还会对其合法性进行检查，帮助开发者尽早发现配置问题",
    "通过voyager的租户配置产品，开发者可以将编辑好的多租户配置信息推送到diamond平台（需选择所要绑定的环境推送）",
    # 查看配置组列表
    "在voyager的租户配置产品中，可以查看当前应用在当前站点下所有相关的配置组列表信息（配置组所绑定的租户属于该站点才会显示）",
    "在voyager的租户配置产的配置组列表中，可以查看每一个配置组的名称、推送到Diamond对应的DataId和Group、配置用途、已绑定的普通环境和项目环境、支持的租户、状态",
    "在voyager的租户配置产品中，配置组包含“编辑中”、“已生效“、“待生效“、“审批中“状态",
    "在voyager的租户配置产品中，对于从未生效的配置组，状态为“编辑中”",
    "在voyager的租户配置产品中，对于生效后的配置组，状态为“已生效”",
    "在voyager的租户配置产品中，对于生效后又进行了修改的配置组，状态为“待生效”",
    "在voyager的租户配置产品中，对于线上环境的配置，当配置推送处于审批中时，状态为“审批中”，    当该配置处于发布流程中时（推送配置的aone流水线未结束），状态会一直处于“审批中”",
    "在voyager的租户配置产品中，对配置组可以进行“查看详情”、“编辑”、“克隆”、“生效”、“删除”操作",
    "在voyager的租户配置产品中，点击“详情”跳转到该配置组的详情页面",
    "在voyager的租户配置产品中，点击“编辑”跳转到该配置组的编辑页面",
    "在voyager的租户配置产品中，点击“克隆”跳转到克隆该配置组的页面，其中克隆配置组名称为“所克隆的配置组名称-clone”，其他配置信息相同",
    "在voyager的租户配置产品中，点击“生效”使该配置组生效，当且仅当该配置组已绑定了环境且状态为“待生效”时可以点击",
    "在voyager的租户配置产品中，点击“删除”删除该配置组，当且仅当该配置未绑定环境时可以删除",
    "在voyager的租户配置产品中，切换“日常”“预发”“线上”环境，可以查看对应的不同环境的配置组列表信息",
    # 创建配置组
    "在voyager的租户配置产品中，在配置组列表页面，点击“新增配置组”可以进入新增配置组页面",
    "在voyager的租户配置产品中，在新增配置组页面，配置组的“配置组名称”、“环境级别”和“租户”为必填项",
    "在voyager的租户配置产品中，配置组的配置用途目前包括“普通”和“SIT”，其中对于线上环境，只能选择“普通”",
    "在voyager的租户配置产品中，配置组的流量标为选填项",
    "在voyager的租户配置产品中，在配置组编辑页面，选择“租户”后，会渲染下面的“配置项分组”",
    "在voyager的租户配置产品中，在配置组编辑页面，在配置项分组的树状结构中，包含两类“叶子结点”，一类是文件夹叶子节点，在点击配置项分组的“编辑”后可以添加多个该项的配置表单，另一类在该类配置项分组下面不可添加多个配置项表单，仅可编辑该配置组叶子结点",
    "在voyager的租户配置产品中，在配置组编辑页面，点击配置项分组的“编辑”后，在对应配置项分组中点击“添加子项”可以增加一个配置项表单，点击“保存”和“确定”后添加成功",
    "在voyager的租户配置产品中，在配置组编辑页面，在配置项分组左栏中点击配置项表单，可以显示该表单，其中会包含一些必填项等校验",
    "在voyager的租户配置产品中，在配置组编辑页面，点击配置项表单的“切换成代码模式”，可以查看该配置项表单的代码形式并可进行编辑。在代码模式下，可以添加相应的注释",
    "在voyager的租户配置产品中，在配置组编辑页面，点击“存草稿”或“下一步”可以保存配置组内容",
    "在voyager的租户配置产品中，在配置组编辑页面，保存配置组内容时会进行配置数据合法性的校验，出现保存失败的情况请检查对应的配置项表单，不合法的配置项会被标记",
    # 生效配置组
    "在voyager的租户配置产品中，在配置组编辑页面，点击“下一步”会跳转到“发布配置”页面",
    "在voyager的租户配置产品中，在“发布配置”页面，需要选择要绑定生效的环境",
    "在voyager的租户配置产品中，在“发布配置”页面，配置生效预览的左栏会显示该配置组在diamond中的内容，右栏会显示该配置组当前的内容",
    "在voyager的租户配置产品中，在“发布配置”页面，点击“发布配置”会推送配置组内容到diamond，其中dataId和group为配置组中相应的值，单元为绑定环境的所属单元，线上环境发布配置会跳转到审批页面",
    "在voyager的租户配置产品中，在“发布配置”页面，点击“发布配置”会推送配置组和环境的绑定关系到diamond，绑定关系的dataId为当前应用名，group为\"env-deploy.properties\"，单元为绑定环境的所属单元，每个应用在每个单元的绑定关系仅有一份配置",
    "在voyager的租户配置产品中，在配置组和环境的绑定关系的diamond中，每一组绑定关系包含多租户配置所在diamond的dataId和group、绑定环境的机器分组、是否是sit环境、支持的租户列表、所属单元",
    # 配置项说明
    "在voyager的租户配置产品中，在配置项表单中，每条配置项均包含“是否全局”开关（部分配置项的该开关不可修改）。该开关默认开启，当用户从关闭切换到开启状态时，表单中所有租户数据默认改为第一列租户的数据",
    "在voyager的租户配置产品中，在配置项表单中，鼠标悬停在配置项名称上，可以查看该配置项的说明",
    "在voyager的租户配置产品中，在配置项表单中，一共包含如下配置项的类型：输入框、多值输入框、开关、单选下拉框、多选下拉框",
    # 配置组生效说明
    "在voyager的租户配置产品中，对于同一个应用下的配置组，新的配置组进行环境绑定，会影响所绑定的环境与之前配置组的绑定。例如配置组A绑定了环境A和环境B，当配置组B绑定环境A生效时，配置组A与环境A会自动解绑（配置组A与环境B不受影响）",
    # Diamond同步
    "在voyager的租户配置产品中，进入编辑配置组的页面，若发现diamond中存储的租户配置内容与本平台不一致，用户可以点击“立即同步”将diamond中的租户配置覆盖本平台的配置内容，若用户不希望覆盖，则点击“继续编辑”即可关闭弹窗，继续在本平台编辑租户配置",
    "在voyager的租户配置产品中，若出现点击过一次继续同步，还反复出现同步弹窗的问题，无需担心，点击继续编辑即可，这是由于配置顺序问题引发的不一致情况，不影响已同步",
    # 查看所有配置
    "在voyager的租户配置产品中，在多租户配置的详情页面，可以点击”查看所有配置”获取配置组中代码形式的所有配置",
    # 线上配置组生效说明
    "在voyager的租户配置产品中，线上环境的配置组点击生效后会生成审批单，页面会跳转到审批流水线，配置组状态会设置为“审批中”",
    "在voyager的租户配置产品中，配置组线上生效审批底层依赖的是Diamond提供的回调能力",
    "在voyager的租户配置产品中，当退出流水线或流水线发布完全结束走完，才会触发Diamond的回调函数，根据发布成功与否的情况，配置组状态会进行变化：发布成功，配置组状态变为已生效；发布失败，配置组状态改为生效前的状态",
    "在voyager的租户配置产品中，若退出流水线或流水线发布完全结束走完，但是Diamond没有正常回调，配置组状态还是“审批中”，请保留配置组和发布审批单，并与多租户的同学联系",
    # 多租户路由规则激活提示
    "在voyager的租户配置产品中，当生效的配置组有改动时，会在配置组列表页面和配置组生效成功的页面给出需要重新激活多租户路由规则的提示，点击链接会跳转到相关应用的流量调度中心，可以激活路由规则",
    # 常见报错说明
    "在voyager的租户配置产品中，对于同一个应用，其多租户配置组的名称需要保持唯一性，当创建配置组时名称重复，会提示“The name of config group to be created is duplicate!”",
    "在voyager的租户配置产品中，对于绑定了环境的多租户配置组，不允许删除，否则会提示“Fail to delete config group! Config group bound to env(s) cannot be deleted!”"
]
